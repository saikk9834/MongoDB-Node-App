"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ono_1 = require("ono");
class ContentType {
    constructor(contentType) {
        this.withoutBoundary = null;
        this.contentType = null;
        this.mediaType = null;
        this.charSet = null;
        this.contentType = contentType;
        if (contentType) {
            this.withoutBoundary = contentType.replace(/;\s{0,}boundary.*/, '');
            this.mediaType = this.withoutBoundary.split(';')[0].trim();
            this.charSet = this.withoutBoundary.split(';')[1];
            if (this.charSet) {
                this.charSet = this.charSet.trim();
            }
        }
    }
    static from(req) {
        return new ContentType(req.headers['content-type']);
    }
    equivalents() {
        if (!this.withoutBoundary)
            return [];
        if (this.charSet) {
            return [this.mediaType, `${this.mediaType}; ${this.charSet}`];
        }
        return [this.withoutBoundary, `${this.mediaType}; charset=utf-8`];
    }
}
exports.ContentType = ContentType;
const _validationError = (status, path, message, errors) => ({
    status,
    errors: [
        Object.assign({ path,
            message }, ({ errors } || {})),
    ],
});
function validationError(status, path, message) {
    const err = _validationError(status, path, message);
    return ono_1.default(err, message);
}
exports.validationError = validationError;
/**
 * (side-effecting) modifies the errors object
 * TODO - do this some other way
 * @param errors
 */
function augmentAjvErrors(errors = []) {
    errors.forEach(e => {
        if (e.keyword === 'enum') {
            const params = e.params;
            const allowedEnumValues = params && params.allowedValues;
            e.message = !!allowedEnumValues
                ? `${e.message}: ${allowedEnumValues.join(', ')}`
                : e.message;
        }
    });
    return errors;
}
exports.augmentAjvErrors = augmentAjvErrors;
function ajvErrorsToValidatorError(status, errors) {
    return {
        status,
        errors: errors.map(e => {
            const params = e.params;
            const required = params &&
                params.missingProperty &&
                e.dataPath + '.' + params.missingProperty;
            const additionalProperty = params &&
                params.additionalProperty &&
                e.dataPath + '.' + params.additionalProperty;
            const path = required || additionalProperty || e.dataPath || e.schemaPath;
            return {
                path,
                message: e.message,
                errorCode: `${e.keyword}.openapi.validation`,
            };
        }),
    };
}
exports.ajvErrorsToValidatorError = ajvErrorsToValidatorError;
//# sourceMappingURL=util.js.map