"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
class OpenApiSpecLoader {
    constructor(opts) {
        this.framework = new index_1.OpenAPIFramework(opts);
    }
    load() {
        const { apiDoc, basePaths } = this.framework;
        const routes = this.discoverRoutes();
        return {
            apiDoc,
            basePaths,
            routes,
        };
    }
    discoverRoutes() {
        const routes = [];
        const toExpressParams = this.toExpressParams;
        const basePaths = this.framework.basePaths;
        this.framework.initialize({
            visitApi(ctx) {
                const apiDoc = ctx.getApiDoc();
                for (const bpa of basePaths) {
                    const bp = bpa.replace(/\/$/, '');
                    for (const [path, methods] of Object.entries(apiDoc.paths)) {
                        for (const [method, schema] of Object.entries(methods)) {
                            if (['parameters', 'summary', 'description'].includes(method)) {
                                continue;
                            }
                            const schemaParameters = new Set();
                            (schema.parameters || []).forEach(parameter => schemaParameters.add(parameter));
                            (methods.parameters || []).forEach(parameter => schemaParameters.add(parameter));
                            schema.parameters = Array.from(schemaParameters);
                            const pathParams = new Set();
                            for (const param of schema.parameters) {
                                if (param.in === 'path') {
                                    pathParams.add(param.name);
                                }
                            }
                            const openApiRoute = `${bp}${path}`;
                            const expressRoute = `${openApiRoute}`
                                .split('/')
                                .map(toExpressParams)
                                .join('/');
                            routes.push({
                                expressRoute,
                                openApiRoute,
                                method: method.toUpperCase(),
                                pathParams: Array.from(pathParams),
                                schema,
                            });
                        }
                    }
                }
            },
        });
        return routes;
    }
    toExpressParams(part) {
        return part.replace(/\{([^}]+)}/g, ':$1');
    }
}
exports.OpenApiSpecLoader = OpenApiSpecLoader;
//# sourceMappingURL=openapi.spec.loader.js.map